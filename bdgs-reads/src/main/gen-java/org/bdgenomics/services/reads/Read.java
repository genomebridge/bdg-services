/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.bdgenomics.services.reads;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Read implements org.apache.thrift.TBase<Read, Read._Fields>, java.io.Serializable, Cloneable, Comparable<Read> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Read");

  private static final org.apache.thrift.protocol.TField SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("sequence", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField QUAL_FIELD_DESC = new org.apache.thrift.protocol.TField("qual", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReadStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReadTupleSchemeFactory());
  }

  public String sequence; // required
  public String qual; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SEQUENCE((short)1, "sequence"),
    QUAL((short)2, "qual");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEQUENCE
          return SEQUENCE;
        case 2: // QUAL
          return QUAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("sequence", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUAL, new org.apache.thrift.meta_data.FieldMetaData("qual", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Read.class, metaDataMap);
  }

  public Read() {
  }

  public Read(
    String sequence,
    String qual)
  {
    this();
    this.sequence = sequence;
    this.qual = qual;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Read(Read other) {
    if (other.isSetSequence()) {
      this.sequence = other.sequence;
    }
    if (other.isSetQual()) {
      this.qual = other.qual;
    }
  }

  public Read deepCopy() {
    return new Read(this);
  }

  @Override
  public void clear() {
    this.sequence = null;
    this.qual = null;
  }

  public String getSequence() {
    return this.sequence;
  }

  public Read setSequence(String sequence) {
    this.sequence = sequence;
    return this;
  }

  public void unsetSequence() {
    this.sequence = null;
  }

  /** Returns true if field sequence is set (has been assigned a value) and false otherwise */
  public boolean isSetSequence() {
    return this.sequence != null;
  }

  public void setSequenceIsSet(boolean value) {
    if (!value) {
      this.sequence = null;
    }
  }

  public String getQual() {
    return this.qual;
  }

  public Read setQual(String qual) {
    this.qual = qual;
    return this;
  }

  public void unsetQual() {
    this.qual = null;
  }

  /** Returns true if field qual is set (has been assigned a value) and false otherwise */
  public boolean isSetQual() {
    return this.qual != null;
  }

  public void setQualIsSet(boolean value) {
    if (!value) {
      this.qual = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEQUENCE:
      if (value == null) {
        unsetSequence();
      } else {
        setSequence((String)value);
      }
      break;

    case QUAL:
      if (value == null) {
        unsetQual();
      } else {
        setQual((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEQUENCE:
      return getSequence();

    case QUAL:
      return getQual();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEQUENCE:
      return isSetSequence();
    case QUAL:
      return isSetQual();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Read)
      return this.equals((Read)that);
    return false;
  }

  public boolean equals(Read that) {
    if (that == null)
      return false;

    boolean this_present_sequence = true && this.isSetSequence();
    boolean that_present_sequence = true && that.isSetSequence();
    if (this_present_sequence || that_present_sequence) {
      if (!(this_present_sequence && that_present_sequence))
        return false;
      if (!this.sequence.equals(that.sequence))
        return false;
    }

    boolean this_present_qual = true && this.isSetQual();
    boolean that_present_qual = true && that.isSetQual();
    if (this_present_qual || that_present_qual) {
      if (!(this_present_qual && that_present_qual))
        return false;
      if (!this.qual.equals(that.qual))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Read other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSequence()).compareTo(other.isSetSequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequence, other.sequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQual()).compareTo(other.isSetQual());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQual()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qual, other.qual);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Read(");
    boolean first = true;

    sb.append("sequence:");
    if (this.sequence == null) {
      sb.append("null");
    } else {
      sb.append(this.sequence);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("qual:");
    if (this.qual == null) {
      sb.append("null");
    } else {
      sb.append(this.qual);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sequence == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sequence' was not present! Struct: " + toString());
    }
    if (qual == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'qual' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReadStandardSchemeFactory implements SchemeFactory {
    public ReadStandardScheme getScheme() {
      return new ReadStandardScheme();
    }
  }

  private static class ReadStandardScheme extends StandardScheme<Read> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Read struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sequence = iprot.readString();
              struct.setSequenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qual = iprot.readString();
              struct.setQualIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Read struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sequence != null) {
        oprot.writeFieldBegin(SEQUENCE_FIELD_DESC);
        oprot.writeString(struct.sequence);
        oprot.writeFieldEnd();
      }
      if (struct.qual != null) {
        oprot.writeFieldBegin(QUAL_FIELD_DESC);
        oprot.writeString(struct.qual);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReadTupleSchemeFactory implements SchemeFactory {
    public ReadTupleScheme getScheme() {
      return new ReadTupleScheme();
    }
  }

  private static class ReadTupleScheme extends TupleScheme<Read> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Read struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.sequence);
      oprot.writeString(struct.qual);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Read struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sequence = iprot.readString();
      struct.setSequenceIsSet(true);
      struct.qual = iprot.readString();
      struct.setQualIsSet(true);
    }
  }

}

