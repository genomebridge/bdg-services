/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.bdgenomics.services.reads;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SamplesResult implements org.apache.thrift.TBase<SamplesResult, SamplesResult._Fields>, java.io.Serializable, Cloneable, Comparable<SamplesResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SamplesResult");

  private static final org.apache.thrift.protocol.TField NEXT_START_FIELD_DESC = new org.apache.thrift.protocol.TField("next_start", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SAMPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("samples", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SamplesResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SamplesResultTupleSchemeFactory());
  }

  public int next_start; // optional
  public List<String> samples; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NEXT_START((short)1, "next_start"),
    SAMPLES((short)2, "samples");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NEXT_START
          return NEXT_START;
        case 2: // SAMPLES
          return SAMPLES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NEXT_START_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.NEXT_START};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NEXT_START, new org.apache.thrift.meta_data.FieldMetaData("next_start", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SAMPLES, new org.apache.thrift.meta_data.FieldMetaData("samples", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SamplesResult.class, metaDataMap);
  }

  public SamplesResult() {
  }

  public SamplesResult(
    List<String> samples)
  {
    this();
    this.samples = samples;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SamplesResult(SamplesResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.next_start = other.next_start;
    if (other.isSetSamples()) {
      List<String> __this__samples = new ArrayList<String>(other.samples);
      this.samples = __this__samples;
    }
  }

  public SamplesResult deepCopy() {
    return new SamplesResult(this);
  }

  @Override
  public void clear() {
    setNext_startIsSet(false);
    this.next_start = 0;
    this.samples = null;
  }

  public int getNext_start() {
    return this.next_start;
  }

  public SamplesResult setNext_start(int next_start) {
    this.next_start = next_start;
    setNext_startIsSet(true);
    return this;
  }

  public void unsetNext_start() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEXT_START_ISSET_ID);
  }

  /** Returns true if field next_start is set (has been assigned a value) and false otherwise */
  public boolean isSetNext_start() {
    return EncodingUtils.testBit(__isset_bitfield, __NEXT_START_ISSET_ID);
  }

  public void setNext_startIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEXT_START_ISSET_ID, value);
  }

  public int getSamplesSize() {
    return (this.samples == null) ? 0 : this.samples.size();
  }

  public java.util.Iterator<String> getSamplesIterator() {
    return (this.samples == null) ? null : this.samples.iterator();
  }

  public void addToSamples(String elem) {
    if (this.samples == null) {
      this.samples = new ArrayList<String>();
    }
    this.samples.add(elem);
  }

  public List<String> getSamples() {
    return this.samples;
  }

  public SamplesResult setSamples(List<String> samples) {
    this.samples = samples;
    return this;
  }

  public void unsetSamples() {
    this.samples = null;
  }

  /** Returns true if field samples is set (has been assigned a value) and false otherwise */
  public boolean isSetSamples() {
    return this.samples != null;
  }

  public void setSamplesIsSet(boolean value) {
    if (!value) {
      this.samples = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NEXT_START:
      if (value == null) {
        unsetNext_start();
      } else {
        setNext_start((Integer)value);
      }
      break;

    case SAMPLES:
      if (value == null) {
        unsetSamples();
      } else {
        setSamples((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NEXT_START:
      return Integer.valueOf(getNext_start());

    case SAMPLES:
      return getSamples();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NEXT_START:
      return isSetNext_start();
    case SAMPLES:
      return isSetSamples();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SamplesResult)
      return this.equals((SamplesResult)that);
    return false;
  }

  public boolean equals(SamplesResult that) {
    if (that == null)
      return false;

    boolean this_present_next_start = true && this.isSetNext_start();
    boolean that_present_next_start = true && that.isSetNext_start();
    if (this_present_next_start || that_present_next_start) {
      if (!(this_present_next_start && that_present_next_start))
        return false;
      if (this.next_start != that.next_start)
        return false;
    }

    boolean this_present_samples = true && this.isSetSamples();
    boolean that_present_samples = true && that.isSetSamples();
    if (this_present_samples || that_present_samples) {
      if (!(this_present_samples && that_present_samples))
        return false;
      if (!this.samples.equals(that.samples))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SamplesResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNext_start()).compareTo(other.isSetNext_start());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNext_start()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.next_start, other.next_start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSamples()).compareTo(other.isSetSamples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSamples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.samples, other.samples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SamplesResult(");
    boolean first = true;

    if (isSetNext_start()) {
      sb.append("next_start:");
      sb.append(this.next_start);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("samples:");
    if (this.samples == null) {
      sb.append("null");
    } else {
      sb.append(this.samples);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (samples == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'samples' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SamplesResultStandardSchemeFactory implements SchemeFactory {
    public SamplesResultStandardScheme getScheme() {
      return new SamplesResultStandardScheme();
    }
  }

  private static class SamplesResultStandardScheme extends StandardScheme<SamplesResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SamplesResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NEXT_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.next_start = iprot.readI32();
              struct.setNext_startIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SAMPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.samples = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.samples.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setSamplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SamplesResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetNext_start()) {
        oprot.writeFieldBegin(NEXT_START_FIELD_DESC);
        oprot.writeI32(struct.next_start);
        oprot.writeFieldEnd();
      }
      if (struct.samples != null) {
        oprot.writeFieldBegin(SAMPLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.samples.size()));
          for (String _iter3 : struct.samples)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SamplesResultTupleSchemeFactory implements SchemeFactory {
    public SamplesResultTupleScheme getScheme() {
      return new SamplesResultTupleScheme();
    }
  }

  private static class SamplesResultTupleScheme extends TupleScheme<SamplesResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SamplesResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.samples.size());
        for (String _iter4 : struct.samples)
        {
          oprot.writeString(_iter4);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetNext_start()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetNext_start()) {
        oprot.writeI32(struct.next_start);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SamplesResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.samples = new ArrayList<String>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          String _elem7;
          _elem7 = iprot.readString();
          struct.samples.add(_elem7);
        }
      }
      struct.setSamplesIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.next_start = iprot.readI32();
        struct.setNext_startIsSet(true);
      }
    }
  }

}

