/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.bdgenomics.services.reads;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Record implements org.apache.thrift.TBase<Record, Record._Fields>, java.io.Serializable, Cloneable, Comparable<Record> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Record");

  private static final org.apache.thrift.protocol.TField SAMPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sampleId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ALIGNMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("alignment", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField READ_FIELD_DESC = new org.apache.thrift.protocol.TField("read", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RecordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RecordTupleSchemeFactory());
  }

  public String sampleId; // required
  /**
   * This is data about where the read was aligned. If the read was not aligned, then this field will not be set.
   * 
   */
  public Alignment alignment; // optional
  public Read read; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SAMPLE_ID((short)1, "sampleId"),
    /**
     * This is data about where the read was aligned. If the read was not aligned, then this field will not be set.
     * 
     */
    ALIGNMENT((short)2, "alignment"),
    READ((short)3, "read");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SAMPLE_ID
          return SAMPLE_ID;
        case 2: // ALIGNMENT
          return ALIGNMENT;
        case 3: // READ
          return READ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.ALIGNMENT,_Fields.READ};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SAMPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("sampleId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALIGNMENT, new org.apache.thrift.meta_data.FieldMetaData("alignment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Alignment.class)));
    tmpMap.put(_Fields.READ, new org.apache.thrift.meta_data.FieldMetaData("read", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Read.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Record.class, metaDataMap);
  }

  public Record() {
  }

  public Record(
    String sampleId)
  {
    this();
    this.sampleId = sampleId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Record(Record other) {
    if (other.isSetSampleId()) {
      this.sampleId = other.sampleId;
    }
    if (other.isSetAlignment()) {
      this.alignment = new Alignment(other.alignment);
    }
    if (other.isSetRead()) {
      this.read = new Read(other.read);
    }
  }

  public Record deepCopy() {
    return new Record(this);
  }

  @Override
  public void clear() {
    this.sampleId = null;
    this.alignment = null;
    this.read = null;
  }

  public String getSampleId() {
    return this.sampleId;
  }

  public Record setSampleId(String sampleId) {
    this.sampleId = sampleId;
    return this;
  }

  public void unsetSampleId() {
    this.sampleId = null;
  }

  /** Returns true if field sampleId is set (has been assigned a value) and false otherwise */
  public boolean isSetSampleId() {
    return this.sampleId != null;
  }

  public void setSampleIdIsSet(boolean value) {
    if (!value) {
      this.sampleId = null;
    }
  }

  /**
   * This is data about where the read was aligned. If the read was not aligned, then this field will not be set.
   * 
   */
  public Alignment getAlignment() {
    return this.alignment;
  }

  /**
   * This is data about where the read was aligned. If the read was not aligned, then this field will not be set.
   * 
   */
  public Record setAlignment(Alignment alignment) {
    this.alignment = alignment;
    return this;
  }

  public void unsetAlignment() {
    this.alignment = null;
  }

  /** Returns true if field alignment is set (has been assigned a value) and false otherwise */
  public boolean isSetAlignment() {
    return this.alignment != null;
  }

  public void setAlignmentIsSet(boolean value) {
    if (!value) {
      this.alignment = null;
    }
  }

  public Read getRead() {
    return this.read;
  }

  public Record setRead(Read read) {
    this.read = read;
    return this;
  }

  public void unsetRead() {
    this.read = null;
  }

  /** Returns true if field read is set (has been assigned a value) and false otherwise */
  public boolean isSetRead() {
    return this.read != null;
  }

  public void setReadIsSet(boolean value) {
    if (!value) {
      this.read = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SAMPLE_ID:
      if (value == null) {
        unsetSampleId();
      } else {
        setSampleId((String)value);
      }
      break;

    case ALIGNMENT:
      if (value == null) {
        unsetAlignment();
      } else {
        setAlignment((Alignment)value);
      }
      break;

    case READ:
      if (value == null) {
        unsetRead();
      } else {
        setRead((Read)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SAMPLE_ID:
      return getSampleId();

    case ALIGNMENT:
      return getAlignment();

    case READ:
      return getRead();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SAMPLE_ID:
      return isSetSampleId();
    case ALIGNMENT:
      return isSetAlignment();
    case READ:
      return isSetRead();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Record)
      return this.equals((Record)that);
    return false;
  }

  public boolean equals(Record that) {
    if (that == null)
      return false;

    boolean this_present_sampleId = true && this.isSetSampleId();
    boolean that_present_sampleId = true && that.isSetSampleId();
    if (this_present_sampleId || that_present_sampleId) {
      if (!(this_present_sampleId && that_present_sampleId))
        return false;
      if (!this.sampleId.equals(that.sampleId))
        return false;
    }

    boolean this_present_alignment = true && this.isSetAlignment();
    boolean that_present_alignment = true && that.isSetAlignment();
    if (this_present_alignment || that_present_alignment) {
      if (!(this_present_alignment && that_present_alignment))
        return false;
      if (!this.alignment.equals(that.alignment))
        return false;
    }

    boolean this_present_read = true && this.isSetRead();
    boolean that_present_read = true && that.isSetRead();
    if (this_present_read || that_present_read) {
      if (!(this_present_read && that_present_read))
        return false;
      if (!this.read.equals(that.read))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Record other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSampleId()).compareTo(other.isSetSampleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSampleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sampleId, other.sampleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlignment()).compareTo(other.isSetAlignment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlignment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alignment, other.alignment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRead()).compareTo(other.isSetRead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.read, other.read);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Record(");
    boolean first = true;

    sb.append("sampleId:");
    if (this.sampleId == null) {
      sb.append("null");
    } else {
      sb.append(this.sampleId);
    }
    first = false;
    if (isSetAlignment()) {
      if (!first) sb.append(", ");
      sb.append("alignment:");
      if (this.alignment == null) {
        sb.append("null");
      } else {
        sb.append(this.alignment);
      }
      first = false;
    }
    if (isSetRead()) {
      if (!first) sb.append(", ");
      sb.append("read:");
      if (this.read == null) {
        sb.append("null");
      } else {
        sb.append(this.read);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sampleId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sampleId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (alignment != null) {
      alignment.validate();
    }
    if (read != null) {
      read.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RecordStandardSchemeFactory implements SchemeFactory {
    public RecordStandardScheme getScheme() {
      return new RecordStandardScheme();
    }
  }

  private static class RecordStandardScheme extends StandardScheme<Record> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Record struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SAMPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sampleId = iprot.readString();
              struct.setSampleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ALIGNMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.alignment = new Alignment();
              struct.alignment.read(iprot);
              struct.setAlignmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // READ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.read = new Read();
              struct.read.read(iprot);
              struct.setReadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Record struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sampleId != null) {
        oprot.writeFieldBegin(SAMPLE_ID_FIELD_DESC);
        oprot.writeString(struct.sampleId);
        oprot.writeFieldEnd();
      }
      if (struct.alignment != null) {
        if (struct.isSetAlignment()) {
          oprot.writeFieldBegin(ALIGNMENT_FIELD_DESC);
          struct.alignment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.read != null) {
        if (struct.isSetRead()) {
          oprot.writeFieldBegin(READ_FIELD_DESC);
          struct.read.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RecordTupleSchemeFactory implements SchemeFactory {
    public RecordTupleScheme getScheme() {
      return new RecordTupleScheme();
    }
  }

  private static class RecordTupleScheme extends TupleScheme<Record> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Record struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.sampleId);
      BitSet optionals = new BitSet();
      if (struct.isSetAlignment()) {
        optionals.set(0);
      }
      if (struct.isSetRead()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAlignment()) {
        struct.alignment.write(oprot);
      }
      if (struct.isSetRead()) {
        struct.read.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Record struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sampleId = iprot.readString();
      struct.setSampleIdIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.alignment = new Alignment();
        struct.alignment.read(iprot);
        struct.setAlignmentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.read = new Read();
        struct.read.read(iprot);
        struct.setReadIsSet(true);
      }
    }
  }

}

