/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.bdgenomics.services.reads;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Alignment implements org.apache.thrift.TBase<Alignment, Alignment._Fields>, java.io.Serializable, Cloneable, Comparable<Alignment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Alignment");

  private static final org.apache.thrift.protocol.TField REFERENCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("referenceName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CIGAR_FIELD_DESC = new org.apache.thrift.protocol.TField("cigar", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AlignmentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AlignmentTupleSchemeFactory());
  }

  public String referenceName; // required
  public long start; // required
  public long length; // required
  public String cigar; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REFERENCE_NAME((short)1, "referenceName"),
    START((short)2, "start"),
    LENGTH((short)3, "length"),
    CIGAR((short)4, "cigar");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REFERENCE_NAME
          return REFERENCE_NAME;
        case 2: // START
          return START;
        case 3: // LENGTH
          return LENGTH;
        case 4: // CIGAR
          return CIGAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __START_ISSET_ID = 0;
  private static final int __LENGTH_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REFERENCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("referenceName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CIGAR, new org.apache.thrift.meta_data.FieldMetaData("cigar", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Alignment.class, metaDataMap);
  }

  public Alignment() {
  }

  public Alignment(
    String referenceName,
    long start,
    long length,
    String cigar)
  {
    this();
    this.referenceName = referenceName;
    this.start = start;
    setStartIsSet(true);
    this.length = length;
    setLengthIsSet(true);
    this.cigar = cigar;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Alignment(Alignment other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetReferenceName()) {
      this.referenceName = other.referenceName;
    }
    this.start = other.start;
    this.length = other.length;
    if (other.isSetCigar()) {
      this.cigar = other.cigar;
    }
  }

  public Alignment deepCopy() {
    return new Alignment(this);
  }

  @Override
  public void clear() {
    this.referenceName = null;
    setStartIsSet(false);
    this.start = 0;
    setLengthIsSet(false);
    this.length = 0;
    this.cigar = null;
  }

  public String getReferenceName() {
    return this.referenceName;
  }

  public Alignment setReferenceName(String referenceName) {
    this.referenceName = referenceName;
    return this;
  }

  public void unsetReferenceName() {
    this.referenceName = null;
  }

  /** Returns true if field referenceName is set (has been assigned a value) and false otherwise */
  public boolean isSetReferenceName() {
    return this.referenceName != null;
  }

  public void setReferenceNameIsSet(boolean value) {
    if (!value) {
      this.referenceName = null;
    }
  }

  public long getStart() {
    return this.start;
  }

  public Alignment setStart(long start) {
    this.start = start;
    setStartIsSet(true);
    return this;
  }

  public void unsetStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
  }

  /** Returns true if field start is set (has been assigned a value) and false otherwise */
  public boolean isSetStart() {
    return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
  }

  public void setStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
  }

  public long getLength() {
    return this.length;
  }

  public Alignment setLength(long length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public String getCigar() {
    return this.cigar;
  }

  public Alignment setCigar(String cigar) {
    this.cigar = cigar;
    return this;
  }

  public void unsetCigar() {
    this.cigar = null;
  }

  /** Returns true if field cigar is set (has been assigned a value) and false otherwise */
  public boolean isSetCigar() {
    return this.cigar != null;
  }

  public void setCigarIsSet(boolean value) {
    if (!value) {
      this.cigar = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REFERENCE_NAME:
      if (value == null) {
        unsetReferenceName();
      } else {
        setReferenceName((String)value);
      }
      break;

    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((Long)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Long)value);
      }
      break;

    case CIGAR:
      if (value == null) {
        unsetCigar();
      } else {
        setCigar((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REFERENCE_NAME:
      return getReferenceName();

    case START:
      return Long.valueOf(getStart());

    case LENGTH:
      return Long.valueOf(getLength());

    case CIGAR:
      return getCigar();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REFERENCE_NAME:
      return isSetReferenceName();
    case START:
      return isSetStart();
    case LENGTH:
      return isSetLength();
    case CIGAR:
      return isSetCigar();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Alignment)
      return this.equals((Alignment)that);
    return false;
  }

  public boolean equals(Alignment that) {
    if (that == null)
      return false;

    boolean this_present_referenceName = true && this.isSetReferenceName();
    boolean that_present_referenceName = true && that.isSetReferenceName();
    if (this_present_referenceName || that_present_referenceName) {
      if (!(this_present_referenceName && that_present_referenceName))
        return false;
      if (!this.referenceName.equals(that.referenceName))
        return false;
    }

    boolean this_present_start = true;
    boolean that_present_start = true;
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (this.start != that.start)
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_cigar = true && this.isSetCigar();
    boolean that_present_cigar = true && that.isSetCigar();
    if (this_present_cigar || that_present_cigar) {
      if (!(this_present_cigar && that_present_cigar))
        return false;
      if (!this.cigar.equals(that.cigar))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Alignment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReferenceName()).compareTo(other.isSetReferenceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReferenceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referenceName, other.referenceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCigar()).compareTo(other.isSetCigar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCigar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cigar, other.cigar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Alignment(");
    boolean first = true;

    sb.append("referenceName:");
    if (this.referenceName == null) {
      sb.append("null");
    } else {
      sb.append(this.referenceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("start:");
    sb.append(this.start);
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cigar:");
    if (this.cigar == null) {
      sb.append("null");
    } else {
      sb.append(this.cigar);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (referenceName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'referenceName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'start' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'length' because it's a primitive and you chose the non-beans generator.
    if (cigar == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cigar' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AlignmentStandardSchemeFactory implements SchemeFactory {
    public AlignmentStandardScheme getScheme() {
      return new AlignmentStandardScheme();
    }
  }

  private static class AlignmentStandardScheme extends StandardScheme<Alignment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Alignment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REFERENCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.referenceName = iprot.readString();
              struct.setReferenceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start = iprot.readI64();
              struct.setStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.length = iprot.readI64();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CIGAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cigar = iprot.readString();
              struct.setCigarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStart()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'start' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLength()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'length' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Alignment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.referenceName != null) {
        oprot.writeFieldBegin(REFERENCE_NAME_FIELD_DESC);
        oprot.writeString(struct.referenceName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI64(struct.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI64(struct.length);
      oprot.writeFieldEnd();
      if (struct.cigar != null) {
        oprot.writeFieldBegin(CIGAR_FIELD_DESC);
        oprot.writeString(struct.cigar);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AlignmentTupleSchemeFactory implements SchemeFactory {
    public AlignmentTupleScheme getScheme() {
      return new AlignmentTupleScheme();
    }
  }

  private static class AlignmentTupleScheme extends TupleScheme<Alignment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Alignment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.referenceName);
      oprot.writeI64(struct.start);
      oprot.writeI64(struct.length);
      oprot.writeString(struct.cigar);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Alignment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.referenceName = iprot.readString();
      struct.setReferenceNameIsSet(true);
      struct.start = iprot.readI64();
      struct.setStartIsSet(true);
      struct.length = iprot.readI64();
      struct.setLengthIsSet(true);
      struct.cigar = iprot.readString();
      struct.setCigarIsSet(true);
    }
  }

}

